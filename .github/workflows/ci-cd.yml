name: Build and Deploy Docker Image

on:
  push:
    branches: ["main"]

env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY: my-ecr-repo
  ECS_SERVICE: my-ecs-service
  ECS_CLUSTER: my-ecs-cluster
  ECS_TASK_DEFINITION: .aws/task-definition.json
  CONTAINER_NAME: my-container
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Extract project info
        id: extract_info
        run: |
          echo "PROJECT_NAME=$(node -p "require('./package.json').name")" >> $GITHUB_ENV
          echo "PROJECT_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV
          echo "AUTHOR=$(node -p "require('./package.json').author")" >> $GITHUB_ENV

      - name: Print project info
        run: |
          echo "PROJECT_NAME=${{ env.PROJECT_NAME }}"
          echo "PROJECT_VERSION=${{ env.PROJECT_VERSION }}"
          echo "AUTHOR=${{ secrets.DOCKER_USERNAME }}"

      - name: Build Docker image
        run: docker build . --file Dockerfile --tag ${{ env.PROJECT_NAME }}:${{ env.PROJECT_VERSION }}

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Tag and push Docker image to Docker Hub
        run: |
          docker tag ${{ env.PROJECT_NAME }}:${{ env.PROJECT_VERSION }} ${{ secrets.DOCKER_USERNAME }}/${{ env.PROJECT_NAME }}:${{ env.PROJECT_VERSION }}
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.PROJECT_NAME }}:${{ env.PROJECT_VERSION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1 

      - name: Tag and push Docker image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }} 
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker tag ${{ env.PROJECT_NAME }}:${{ env.PROJECT_VERSION }} $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${{ env.PROJECT_VERSION }}
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${{ env.PROJECT_VERSION }}
          echo "image=$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${{ env.PROJECT_VERSION }}" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
