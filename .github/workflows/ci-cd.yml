name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: us-east-2                   # Set this to your preferred AWS region
  ECR_REPOSITORY: my-ecr-repo             # Set this to your Amazon ECR repository name
  ECS_SERVICE: my-ecs-service             # Set this to your Amazon ECS service name
  ECS_CLUSTER: my-ecs-cluster             # Set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: .aws/task-definition.json # Path to your ECS task definition file
  CONTAINER_NAME: my-container            # Set this to the container name in your task definition

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '21'

    - name: Extract project info
      id: extract_info
      run: |
        echo "PROJECT_NAME=$(node -p "require('./package.json').name")" >> $GITHUB_ENV
        echo "PROJECT_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV
        echo "AUTHOR=$(node -p "require('./package.json').author")" >> $GITHUB_ENV

    - name: Build, tag, and push Docker image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${{ env.PROJECT_VERSION }} .
        docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${{ env.PROJECT_VERSION }}
        echo "image=$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${{ env.PROJECT_VERSION }}" >> $GITHUB_OUTPUT

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
